• Wie erfolgt die Interrupt-Behandlung bisher? Wenn ein Interrupt eintritt, ab wann können
neue Interrupts auftreten? Wozu dienen die Interrupt-Sperren (IntLock) und wann ist ihr Einsatz bisher notwendig? => Wenn Prozesse auf gemeinsamen Datenstrukturen arbeiten.
Momentan wird in Clock und Keyboard die handle Methode aufgerufen, welche dann über den PIT den aktuellen Interrupt bestätigt und die checkSlice aufgerufen wird. Die Systemzeit wird dazu aktualisiert. Wenn ein neuer Prozess in der Ready Liste ist, dann wird voher mit IntLock die Interrupt Behandlungsmöglichkeit gesperrt. Das macht das System auf Dauer sehr träge. Neue Interrupts können auftreten, wenn der Destruktor des IntLocks aufgerufen wurde. Das Schlimme ist daran, dass wir die IntLocks an verschiedenen Stellen gesetzt haben und das alles gemeinsam von einem Monitor gelöst werden konnte. Ein Thread kann nur aktiv werden, wenn der Monitor gerade frei ist. BS Kern als Monitor. Nur ein Interrupt-Handler (wir haben Tastatur und Clock) darf im Kern aktiv sein.

• Wozu dienen bei der Interrupt-Behandlung Prolog und Epilog?
nur ein Prozess/Interrupt-Handler darf im Kern aktiv sein
Zerlegung der Interrupt-Behandlung in Prolog und Epilog
Prolog wird bei jedem Interrupt ausgeführt
Epilog wird nur dann, wenn der Kern frei ist, ausgeführt
ist der Kern besetzt, müssen wir uns merken, dass Epiloge abzuarbeiten
sind und sie dann abarbeiten, wenn der Kern frei wird

• Worin unterscheiden sie sich?
Prolog: 
Bestätigung des Interrupts beim PIC
aktuelle Zeit hochzählen
⇒ wird bei jedem Interrupt ausgeführt

Epilog:
checkSlice aufrufen
⇒ wird ausgeführt, sobald der Kern frei ist

• Welchen Vorteil bringt die Aufteilung?
Nur eine Interrupt Behandlung wird im Kern ausgeführt über den Epilog. 
Die Prologe werden gespeichert, könne aber schon die notwendigen Schritte einleiten, um dass die Behandlung vollführt werden kann.

• Was ist ein Monitor?
- wechselseitiger Ausschluss 
- nicht-blockierende Synchronisation Konzept
- stellt sicher, dass nur eine Interruptbehandlung im BS-Kern (Gerätetreiber, Prozessverwaltung) ist
- Vorstellung: Objekt, auf das immer nur ein einziger Thread zugreifen darf
- ist ein Thread aktiv und andere wollen zugreifen, so blockieren diese

• Wozu wird er verwendet? Welches Konzept ersetzt er?
- stellt sicher, dass nur eine Interruptbehandlung im BS-Kern (Gerätetreiber, Prozessverwaltung) ist
- ersetzt Interrupt Sperren

• Was ist eine Semaphore?
- kann für Betriebsmittelverwaltung benutzt werden, wenn nur eine bestimmte Anzahl zur Verfügung stehen
- oder dient als Schutz für kritische Abschnitte (binäre Semaphore)
- dient als Zähler, wieviele Prozesse gerade quasi parallel arbeiten duerfen
- wait() sagt dass ein Prozess jetzt gerade der Semaphore bescheid gibt: Hey ich will gerade drann sein.
-> Der Zähler der Semaphore wird um eins dekrementiert, da jetzt ein Platz vergeben wurde
-> wenn jetzt natürlich keine Betriebsmittel mehr übrig sind und der Zähler somit 0 wird, dann muss jeder neue Prozess warten bis die Semaphore wieder Platz hat (prozesse werden schlafen gelegt also blockiert)
-> signal() sagt: oh ich bin jetzt fertig mit der Nutzung des Betriebsmittels und jetzt kann wieder ein nächster das Nutzen-> Semaphoren Zähler wird um eins erhöht

• Was ist private Vererbung?
Bei der reinen Implementierungsvererbung, die auch als private Vererbung bezeichnet wird, nutzt die erbende Klasse die Funktionalität und Attribute der Basisklasse, ohne nach außen als Unterklasse dieser Klasse zu gelten.
Als Beispiel könnte eine Klasse RechtwinkligesDreieck von der Klasse Rechteck des obigen Beispiels die Implementierung erben, um die Hypotenuse über die Methode getDiagonale zu berechnen, nachdem die Länge der Katheten für Länge und Breite eingesetzt wurden. 

