Ausführungszustände sind Running, Blocked, Ready
Prozesswechsel erfordert Daten + Code Sicherung, dass später weitergemacht werden kann.
Verwaltung funktioniert durch Coroutinen (Prozesse mit Kontrollflussabgabe).
[Prozessverwaltung]
- Speicherung und Wiederherstellung der Ausführungszustände
- aktive Prozesse im Dispatcher
- bei Blocked muss nächster Ready Prozess ermittelt sein
- Scheduler besitzt Liste von Ready Prozessen 

Liste ist schwierig zu erstellen, weil keine dynamische Speicherverwaltung. 
Datenstruktur existiert in statischer Speicherverwaltung, die ein Listenelement repräsentiert. 
Jede Klasse, deren Objekte in einer Liste verwaltet werden, 
muss die Klasse, 
die das Listenelement repräsentiert
, erweitern.
Beispiel: 
Von der Klasse Mensch wurden 3 Instanzen erstellt. Instanz 1 ist Chris, Instanz 2 ist Tom, Instanz 3 ist Tim.
Chris, Tom und Tim werden in eine Liste gepackt. Klasse Mensch repräsentiert die Instanz Chris, folglich muss
Chris von Mensch erben.

Aktivitäten werden vom Scheduler verwaltet. 
Aktivitäten führen Coroutinen und Listenelemente zusammen. 
Aktivitäten besitzen einen Ausführungszustand.
Aktivitäten besitzen weitere häufig benutzte Methoden.

[Aufgabe 3.1]
main1; Anton ctor; Berta ctor; main2; Anton body; main3; Berta dtor; Anton dtor;
wichtig ist, dass der Destruktor zum Ende der Main den Stack leert 
	von zu letzt raufgepusht bis zum anfang raufgepusht.

[Aufgabe 3.2]
Konstruktor wird von createHello() aus aufgerufen und die Speicheradresse vom Objekt anton ist in der globalen 
Pointer Variablen front gespeichert. Da nach der Funktion der Stack innerhalb dieser Funktion geleert wird, 
muss der Destruktor von anton aufgerufen werden. front zeigt jetzt auf eine Speicheradresse in der kein Objekt 
von Hello mehr ist. Danach wird in der Main der Konstruktor vom Hello Objekt berta aufgerufen. Darauf
zeigt der Zeiger front  (zeigt auf ein Objekt von Hello) nun auf die Speicheradresse von Berta.
Dann wird durch das Ende der Main Funktion folglich der Destruktor von berta aufgerufen. 

Anmerkung: Die body() Methode des zu letzt gepushten Elements vom Typ Hello wird aufgerufen, da 
der Zeiger front (globales Attribut) auf ein Hello Objekt zeigt, dass zuvor mit der Adresse von anton initialisiert wurde.
Da anton danach gepoppt wurde und berta direkt danach gepusht wurde muss berta folglich direkt 
an der selben Speicheradresse wie das damals gepushte Objekt Hallo anton sein. 

gehe von aufgabe 3.1 aus:
int main() {
	Hello anton("Anton");
	delete anton; // oder anton->~Hello();
	Hello berta("Berta");
	berta.body();
	// optional delete berta; aber } macht das schon.	
}

[Kontrollfragen]

Was ist ein Prozess im Sinne der Informatik?

Prozess bezeichnet eine Aktivität, also eine Folge von Aktionen, die zur Laufzeit festgelegt wird.
Prozess ist die Ausführung eines Programms. Prozess lebt nur einmal. Ein Prozess kann die Ausführungszustände
Running, Blocked und Ready annehmen. Der Scheduler verwaltet Ready und Running.

Warum ist die Abstraktion eines Prozesses sinnvoll? (Monopolisierung einer CPU)

Ein Prozess ist das Aktivitätszentrum innerhalb einer Folge von Elementaroperationen.
Damit wird ein Prozess zu einer abstrakten Einheit, die sich durch die Instruktionen eines
abstrakten Programms bewegt, wenn dieses auf einem Rechner ausgeführt wird.

Die Abstraktion eines Prozesses ist sinnvoll, da das Betriebssystem nicht unbedingt wissen muss,
was genau für Instruktionen das Programm gerade ausführt. Wenn ein Prozess die CPU monopolisiert 
(z. B. Endlosschleife),
dann bleibt wenig Zeit für die anderen Prozesse abgearbeitet zu werden. Deswegen ist es sinnvoll 
eine Folge von Elementaroperationen als einen gesamten Prozess zu betrachten und z. B. zu Priorisieren,
dass ein neues Benutzerprogramm (in C++ geschrieben) vielleicht eine geringere Priorität hat als
die grafische Benutzeroberfläche im Desktop Betrieb (oder explorer.exe).

Was ist ein Prozesswechsel? (konkrete Schritte)
Ein Prozesswechsel ist die Zuteilung der CPU vom Scheduler von einem Prozess zu einem Anderen.
Scheduler kennt Menge von Ready Prozessen. (lineare Liste)
Ordnung in der Liste => Reihenfolge der Prozessorvergabe an Prozesse in der Liste
1. Planung
 - Festlegung der Prozessorzuteilung
 - Aufbau der Zuteilungsliste
 - Einsortierung der Prozesskontrollblöcke
2. Zuteilung
 - Abarbeitung der Zuteilungsliste
 - Entnahme eines Prozesskontrollblocks
 - Kontextwechsel zum nächsten Prozess
 - Aktivierung der zugeordneten Coroutine
Warteschlange legt fest, welcher Prozess den Prozessor zugeteilt bekommt.
Der Vorgang des Prozesswechsels wird Dispatching genannt. 
Der Dispatcher erhält den Auftrag durch den Scheduler.
Prozess kann die CPU nur freiwillig abgeben.
Der Dispatcher kennt den jeweils aktiven Prozess. 
Setzen des Zeigers auf den Prozesskontrollblock vor dem Prozesswechsel.

Wie sieht ein Prozesswechsel dementsprechend auf der x86 Hardware aus?
1. Kontext der zu deaktivierenden Coroutine sichern
	a) ebp, ebx, esi und edi auf den Stack retten oder im Kontrollflussstatusblock sichern
	b) esp im Kontrollflussstatusblcok sichern
2. Kontext der zu aktivierenden Corountine wieder herstellen
	a) esp aus dem Kontrollflussstatusblock laden
	b) edi, esi, ebx und ebp wiederherstellen
	c) zurückkehren (resume)

Wie sieht der Stack beim ersten Wechsel zu einem Prozess aus?
Initialer Stack:
[hohe Adressen]
Parameter
Rücksprungadresse (irgendwas angeben ist egal)
Startadresse der Coroutine 
lokales Resume Frame (Datenraum)
[niedrige Adressen]

[hohe Adressen]
x86 initialer Stack
struct SetupFrame {
	unsigned edi; // nichtfl. Register
	unsigned esi; // nichtfl. Register
	unsigned ebx; // nichtfl. Register
	void* bp;     // Register fuer lokale basis
	void (*coroutine)(Parameter); // Startadresse der Corout.
	void* nirwana; // simulierte Ruecksprungadresse
	Parameter arg; // Parameter an coroutine
};
[niedrige Adressen]

Was ist ein Prozesskontrollblock und was beschreibt er?
- verweist auf alle Verwaltungsinformationen pro Prozess
- Prozess ID
- CPU Register
- Ausführungszustand
- Adressraum 
- weitere Betriebsmittelbelegung
- ggf. Liste aller Threads
- von BS-Kern in einer Prozesstabelle verwaltet

In welchem Kontext ergibt ein Prozesskontrollblock Sinn?
User möchte Übersicht von den aktiven Prozessen anzeigen mit ID.
Betriebssystem kann nun mithilfe der Informationen einen Prozess direkt ansprechen.

Welche Arten von Prozessverwaltung gibt es?
schwergewichtige Prozesse
leichtgewichtige Prozesse: 
Thread-Verwaltung (User-Level Threads / Kernel-Level Threads)

Nenne und erkläre grundlegende Algorithmen der Prozessverwaltung!

Was ist eine Ready-Liste und wozu dient sie?
- Warteschlange für Prozesse, die in den Ausführungsstatus Running können
- müssen vom Scheduler CPU zugeteilt bekommen
- Ready Liste wird von links nach rechts abgearbeitet
- Ready Liste dient zur Ausfürungsreihenfolge von Prozessen

Müssen Prozesse beendet werden? Wenn ja, wann und wie? Wenn nein, warum nicht? 
Wie lange exisiteren die Prozesse dann? 
- Prozesse müssen nicht beendet werden
- ihnen kann auch ein kompletter Headshot gesetzt werden (kill 9) Prozesstötung
- Prozesse existieren wenn sie gestartet sind und
	 so lange, wie ihre Instruktionen noch nicht abgearbeitet sind 
		oder getötet worden sind (Stromausfall oder manueller kill)

Was ist eine Coroutine?
- Prozedur mit eigenem Laufzeitkontext (Stack)
- Kontrollfluß einer Coroutine kann explizit zu einer anderen transferiert werden
- Coroutine kann sagen: Hey ich kann meinen Kontrollfluss jetzt abgeben, da ich gerade warten muss.
- kann später genau an der Stelle weiterarbeiten wo die Coroutine aufgehört hat
- der lokale Laufzeitkontext bleibt vollständig erhalten (lokale Variablen auf dem Stack)

